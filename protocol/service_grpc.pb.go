// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.13.0
// source: service.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileService_Shutdown_FullMethodName           = "/protocol.FileService/Shutdown"
	FileService_Exists_FullMethodName             = "/protocol.FileService/Exists"
	FileService_ReadData_FullMethodName           = "/protocol.FileService/ReadData"
	FileService_DeleteData_FullMethodName         = "/protocol.FileService/DeleteData"
	FileService_WriteData_FullMethodName          = "/protocol.FileService/WriteData"
	FileService_GetEntireSpaceInfo_FullMethodName = "/protocol.FileService/GetEntireSpaceInfo"
	FileService_GetAnySpaceInfo_FullMethodName    = "/protocol.FileService/GetAnySpaceInfo"
)

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	Shutdown(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*ResponseResult, error)
	Exists(ctx context.Context, in *DataExistRequest, opts ...grpc.CallOption) (*ExistsResult, error)
	ReadData(ctx context.Context, in *DataReadRequest, opts ...grpc.CallOption) (FileService_ReadDataClient, error)
	DeleteData(ctx context.Context, in *DataDeleteRequest, opts ...grpc.CallOption) (*HandleResult, error)
	WriteData(ctx context.Context, opts ...grpc.CallOption) (FileService_WriteDataClient, error)
	GetEntireSpaceInfo(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*SpaceInfo, error)
	GetAnySpaceInfo(ctx context.Context, in *DiskVS, opts ...grpc.CallOption) (*SpaceInfos, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) Shutdown(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*ResponseResult, error) {
	out := new(ResponseResult)
	err := c.cc.Invoke(ctx, FileService_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Exists(ctx context.Context, in *DataExistRequest, opts ...grpc.CallOption) (*ExistsResult, error) {
	out := new(ExistsResult)
	err := c.cc.Invoke(ctx, FileService_Exists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ReadData(ctx context.Context, in *DataReadRequest, opts ...grpc.CallOption) (FileService_ReadDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[0], FileService_ReadData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceReadDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_ReadDataClient interface {
	Recv() (*DataChunk, error)
	grpc.ClientStream
}

type fileServiceReadDataClient struct {
	grpc.ClientStream
}

func (x *fileServiceReadDataClient) Recv() (*DataChunk, error) {
	m := new(DataChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) DeleteData(ctx context.Context, in *DataDeleteRequest, opts ...grpc.CallOption) (*HandleResult, error) {
	out := new(HandleResult)
	err := c.cc.Invoke(ctx, FileService_DeleteData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) WriteData(ctx context.Context, opts ...grpc.CallOption) (FileService_WriteDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[1], FileService_WriteData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceWriteDataClient{stream}
	return x, nil
}

type FileService_WriteDataClient interface {
	Send(*DataWriteRequest) error
	CloseAndRecv() (*HandleResult, error)
	grpc.ClientStream
}

type fileServiceWriteDataClient struct {
	grpc.ClientStream
}

func (x *fileServiceWriteDataClient) Send(m *DataWriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceWriteDataClient) CloseAndRecv() (*HandleResult, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HandleResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) GetEntireSpaceInfo(ctx context.Context, in *NullMsg, opts ...grpc.CallOption) (*SpaceInfo, error) {
	out := new(SpaceInfo)
	err := c.cc.Invoke(ctx, FileService_GetEntireSpaceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetAnySpaceInfo(ctx context.Context, in *DiskVS, opts ...grpc.CallOption) (*SpaceInfos, error) {
	out := new(SpaceInfos)
	err := c.cc.Invoke(ctx, FileService_GetAnySpaceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	Shutdown(context.Context, *NullMsg) (*ResponseResult, error)
	Exists(context.Context, *DataExistRequest) (*ExistsResult, error)
	ReadData(*DataReadRequest, FileService_ReadDataServer) error
	DeleteData(context.Context, *DataDeleteRequest) (*HandleResult, error)
	WriteData(FileService_WriteDataServer) error
	GetEntireSpaceInfo(context.Context, *NullMsg) (*SpaceInfo, error)
	GetAnySpaceInfo(context.Context, *DiskVS) (*SpaceInfos, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) Shutdown(context.Context, *NullMsg) (*ResponseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedFileServiceServer) Exists(context.Context, *DataExistRequest) (*ExistsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedFileServiceServer) ReadData(*DataReadRequest, FileService_ReadDataServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadData not implemented")
}
func (UnimplementedFileServiceServer) DeleteData(context.Context, *DataDeleteRequest) (*HandleResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteData not implemented")
}
func (UnimplementedFileServiceServer) WriteData(FileService_WriteDataServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteData not implemented")
}
func (UnimplementedFileServiceServer) GetEntireSpaceInfo(context.Context, *NullMsg) (*SpaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntireSpaceInfo not implemented")
}
func (UnimplementedFileServiceServer) GetAnySpaceInfo(context.Context, *DiskVS) (*SpaceInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnySpaceInfo not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Shutdown(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_Exists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Exists(ctx, req.(*DataExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ReadData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).ReadData(m, &fileServiceReadDataServer{stream})
}

type FileService_ReadDataServer interface {
	Send(*DataChunk) error
	grpc.ServerStream
}

type fileServiceReadDataServer struct {
	grpc.ServerStream
}

func (x *fileServiceReadDataServer) Send(m *DataChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _FileService_DeleteData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_DeleteData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteData(ctx, req.(*DataDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_WriteData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).WriteData(&fileServiceWriteDataServer{stream})
}

type FileService_WriteDataServer interface {
	SendAndClose(*HandleResult) error
	Recv() (*DataWriteRequest, error)
	grpc.ServerStream
}

type fileServiceWriteDataServer struct {
	grpc.ServerStream
}

func (x *fileServiceWriteDataServer) SendAndClose(m *HandleResult) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceWriteDataServer) Recv() (*DataWriteRequest, error) {
	m := new(DataWriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileService_GetEntireSpaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetEntireSpaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_GetEntireSpaceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetEntireSpaceInfo(ctx, req.(*NullMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetAnySpaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiskVS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetAnySpaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_GetAnySpaceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetAnySpaceInfo(ctx, req.(*DiskVS))
	}
	return interceptor(ctx, in, info, handler)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Shutdown",
			Handler:    _FileService_Shutdown_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _FileService_Exists_Handler,
		},
		{
			MethodName: "DeleteData",
			Handler:    _FileService_DeleteData_Handler,
		},
		{
			MethodName: "GetEntireSpaceInfo",
			Handler:    _FileService_GetEntireSpaceInfo_Handler,
		},
		{
			MethodName: "GetAnySpaceInfo",
			Handler:    _FileService_GetAnySpaceInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadData",
			Handler:       _FileService_ReadData_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteData",
			Handler:       _FileService_WriteData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
